// Code generated by MockGen. DO NOT EDIT.
// Source: ./producer/producer.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	rmq "github.com/adjust/rmq/v3"
	gomock "github.com/golang/mock/gomock"
)

// MockSendingManager is a mock of SendingManager interface.
type MockSendingManager struct {
	ctrl     *gomock.Controller
	recorder *MockSendingManagerMockRecorder
}

// MockSendingManagerMockRecorder is the mock recorder for MockSendingManager.
type MockSendingManagerMockRecorder struct {
	mock *MockSendingManager
}

// NewMockSendingManager creates a new mock instance.
func NewMockSendingManager(ctrl *gomock.Controller) *MockSendingManager {
	mock := &MockSendingManager{ctrl: ctrl}
	mock.recorder = &MockSendingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingManager) EXPECT() *MockSendingManagerMockRecorder {
	return m.recorder
}

// OpenConnAndQueue_Send mocks base method.
func (m *MockSendingManager) OpenConnAndQueue_Send() rmq.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenConnAndQueue_Send")
	ret0, _ := ret[0].(rmq.Queue)
	return ret0
}

// OpenConnAndQueue_Send indicates an expected call of OpenConnAndQueue_Send.
func (mr *MockSendingManagerMockRecorder) OpenConnAndQueue_Send() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenConnAndQueue_Send", reflect.TypeOf((*MockSendingManager)(nil).OpenConnAndQueue_Send))
}

// SendPayload mocks base method.
func (m *MockSendingManager) SendPayload(arg0 rmq.Queue, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPayload", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPayload indicates an expected call of SendPayload.
func (mr *MockSendingManagerMockRecorder) SendPayload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayload", reflect.TypeOf((*MockSendingManager)(nil).SendPayload), arg0, arg1)
}
